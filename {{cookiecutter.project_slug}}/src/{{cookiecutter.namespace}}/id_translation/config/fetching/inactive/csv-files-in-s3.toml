[fetching.PandasFetcher]
# ------------------------------------------------------------------------------
# Implementation-specific configuration. All available arguments to the
# AbstractFetcher and PandasFetcher-classes may be used here, except 'mapper'
# (see subsection [fetching.mapping]).
#
# https://id-translation.readthedocs.io/en/stable/_autosummary/id_translation.fetching.html#id_translation.fetching.AbstractFetcher
# https://id-translation.readthedocs.io/en/stable/_autosummary/id_translation.fetching.html#id_translation.fetching.PandasFetcher
#
read_function = "read_csv"  # Unqualified names read from the 'pandas' namespace.
read_path_format = "s3://path/to/bucket/{source}.csv"  # The 'source' must be present.
online = false  # Set online=true to make the Translator more conservative, saving money on data transfer fees.

[fetching.PandasFetcher.read_function_kwargs]  # Passed as-is to the chosen read-function.
storage_options = { key = "<AWS_ACCESS_KEY_ID>", secret = "<AWS_SECRET_ACCESS_KEY>", token = "<AWS_SESSION_TOKEN>" }

# ------------------------------------------------------------------------------
# AbstractFetcher configuration.
#
# https://id-translation.readthedocs.io/en/stable/_autosummary/id_translation.fetching.html#id_translation.fetching.AbstractFetcher
selective_fetch_all = false
fetch_all_cache_max_age = "0d"  # No fetcher-specific cache (default).

# ------------------------------------------------------------------------------
# Placeholder mapping configuration. Binds actual names in sources (such as
# column names in an SQL table) to wanted names, eg id = 'animal_id'.
#
# Vocabulary:
#       value: A placeholder to match to a column name.
#   candidate: The name of a column in a table.
#     context: The name of the current table (the 'source'). Usually be a file for PandasFetcher.
#
# https://id-translation.readthedocs.io/en/stable/documentation/mapping-primer.html
# https://id-translation.readthedocs.io/en/stable/_autosummary/id_translation.mapping.html
#
[fetching.mapping]
unmapped_values_action = "warn"  # Logs on the WARNING level
score_function = "modified_hamming"
verbose_logging = false # High volume; set true only if needed

# ------------------------------------------------------------------------------
# https://id-translation.readthedocs.io/en/stable/_autosummary/id_translation.mapping.filter_functions.html
[[fetching.mapping.filter_functions]]  # Avoid tables that contain banned keywords.
function = "banned_substring"
substrings = ["previous_", "old_"]
where = "context"  # Table name may not contain 'previous_' or 'old_'
[[fetching.mapping.filter_functions]]  # No safety incidents please!
function = "banned_substring"
substrings = ["password", "hash"]
where = "candidate"  # Column name may not contain 'password' or 'hash'

# ------------------------------------------------------------------------------
# https://id-translation.readthedocs.io/en/stable/_autosummary/id_translation.mapping.heuristic_functions.html
# Set mutate=true to keep the new value and candidate names until mapping is complete.
[[fetching.mapping.score_function_heuristics]]  # For tables with a prefix, e.g. first_animals instead of just animals
function = "value_fstring_alias"
fstring = "first_{value}"
[[fetching.mapping.score_function_heuristics]] # Handle smurf naming, e.g. column 'animal_id' in table 'animals'
function = "value_fstring_alias"
fstring = "{context}_{value}"
[[fetching.mapping.score_function_heuristics]] # Name column is table name, e.g. 'animals.animal' instead if 'animals.name'.
function = "value_fstring_alias"
fstring = "{context}"
for_value = "name"  # Required since {name} is not in the fstring
[[fetching.mapping.score_function_heuristics]]
function = "like_database_table"

# ------------------------------------------------------------------------------
# For mappings that are difficult or impossible to resolve using scoring logic.
[fetching.mapping.overrides]  # Shared overrides used for all tables
actual_column = "wanted_placeholder"
[fetching.mapping.overrides.table_name]  # Overrides for 'table_name' only.
actual_column_in_file = "wanted_placeholder"
